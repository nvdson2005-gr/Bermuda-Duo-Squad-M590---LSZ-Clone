import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "../Global/GlobalManager/GlobalUIManager.fcg" as GlobalUIManager
import "../Global/GlobalManager/GlobalSoundManager.fcg" as GlobalSoundManager
import "../Global/GlobalManager/GlobalGameManager.fcg" as GlobalGameManager
import "../Global/GlobalData/GlobalGunCombo.fcg" as GlobalGunCombo
import "../Player/PlayerController.fcg" as PlayerController
import "List.fcc" as List
import "Workflow.fcc" as Workflow
import "Math.fcc" as Math
import "Items.fcc" as Items
import "Hud.fcc" as Hud
import "../Global/GlobalData/GlobalConfig.fcg" as GlobalConfig
import "Convert.fcc" as Convert
import "../Global/GlobalData/CombatRoundCounter.fcg" as CombatRoundCounter
import "Player.fcc" as Player
graph PlayerUI {
    gunCombosThisRound List<List<ItemIDType>> = List<List<ItemIDType>>{}
    gunVoteCountdown int 
    didChooseCombo bool = false
    currentComboIndex int = -1
    phaseCountDownHUD entity<BuiltInUI>
    // matchInfoSubtitleHUD entity<BuiltInUI>
    chosenMutexLock bool = false
    //Executed when entity is created
    event OnAwake() {
        start globalEntity<GlobalUIManager>.CreateGlobalOpeningHUD(thisEntity as entity<Player>)
        gunVoteCountdown = globalEntity<GlobalGameManager>.prepPhaseDuration
        CreateBuiltInUI(out var createdPhaseCountDownHUD, thisEntity as entity<Player>, EResInternalHud.PhaseCountDownHud as BuiltInUIType)
        phaseCountDownHUD = createdPhaseCountDownHUD
        // CreateBuiltInUI(out var createdMatchInfoSubtitleHUD, thisEntity as entity<Player>, EResInternalHud.MatchInfoSubTitleHud as BuiltInUIType)
        // matchInfoSubtitleHUD = createdMatchInfoSubtitleHUD
        // matchInfoSubtitleHUD<UIMatchSubtitle>.TextKey = LocString{"FULL_SCBOARD_TARGET", List<string>{ToString(globalEntity<CombatRoundCounter>.GetCount()), ToString(GlobalConfig.MAX_ROUND)}}
        // matchInfoSubtitleHUD<UIMatchSubtitle>.TextKeyParams = List<int>{GlobalConfig.WIN_POINTS}
    }

    event OnPhaseEnd(phase entity<Phase>) {
        if phase<Phase>.Index == EPhase.Vote {
            var gunCombo List<ItemIDType> 
            globalEntity<GlobalUIManager>.SetVisibilityVoteUI(thisEntity as entity<Player>, false)
            if didChooseCombo == false {
                gunCombo = gunCombosThisRound[Math.RandomInt(0, List.Length(gunCombosThisRound))]
            } else {
                didChooseCombo = false
                globalEntity<GlobalUIManager>.DisableAllSelectWidgets(thisEntity as entity<Player>)
                gunCombo = gunCombosThisRound[currentComboIndex]
            }
            for index, weapon in gunCombo {
                // thisEntity<PlayerController>.AddItemToPlayer(thisEntity as entity<Player>, weapon as EResItem, 1)
                AddItem(thisEntity as entity<Player>, weapon as ItemIDType, 1, out var newItem)
                var newGun = newItem[0] as entity<Weapon>
                newGun<Weapon>.CurrentAmmo = 100
            }
            if GetItemCount(thisEntity as entity<Player>, EResItem.HORIZALINE as ItemIDType) != 0 {
                DestroyItem(thisEntity as entity<Player>, EResItem.HORIZALINE as ItemIDType, GetItemCount(thisEntity as entity<Player>, EResItem.HORIZALINE as ItemIDType)) // Destroy the item when added
            }
            AddItem(thisEntity as entity<Player>, EResItem.HORIZALINE as ItemIDType, 1, out var newHorizaline) // Add the item to the player
            thisEntity<PlayerController>.AddItemToPlayer(thisEntity as entity<Player>, EResItem.VEST_2, 1)
            thisEntity<PlayerController>.AddItemToPlayer(thisEntity as entity<Player>, EResItem.HELMET_2, 1)
        }
    }

    event OnPlayerRevived(player entity<Player>, revivalSource PlayerReviveSourceType) {
        if revivalSource == PlayerReviveSourceType.KnockDown {
            globalEntity<GlobalUIManager>.UpdateMiniScoreboard()
        }
    }

    /*
    Update the vote info subtitle for a player.
    @param round The round number
    */
    func UpdateVoteInfoSubtitle(round int) {
        // matchInfoSubtitleHUD<UIMatchSubtitle>.TextKey = LocString{"FULL_SCBOARD_TARGET", List<string>{ToString(round), ToString(GlobalConfig.MAX_ROUND)}}
    }

    /*
    Start the countdown for the gun vote.
    @param countdown The countdown time
    */
    async func StartCountdown(countdown int) {
        var isPlayingSound bool = false
        while true {
            countdown = countdown - 1
            globalEntity<GlobalUIManager>.UpdateVoteCountdown(thisEntity as entity<Player>, countdown)
            WaitForMillisecond(1000)
            if (countdown <= 6 && isPlayingSound == false) {
                isPlayingSound = true
                start globalEntity<GlobalSoundManager>.PlayFiveSecSfx(thisEntity as entity<Player>, 0)
            }

            if countdown <= 0 {
                break
            }
        }
    }

    /*
    Set up the vote UI for a player.
    @param player The player entity to set up the UI for
    */
    async func SetUpVoteUI(player entity<Player>) {
        var randomGunCombos List<List<ItemIDType>> = globalEntity<GlobalGunCombo>.GetRandomGunCombos()
        gunCombosThisRound = randomGunCombos
        WaitForMillisecond(500)
        // var randomGunNames List<List<string>> = List<List<string>>{}
        var randomGunImgs List<List<SpriteID>> = List<List<SpriteID>>{}
        for index, gunCombo in randomGunCombos {
            // var gunName List<string> = List<string>{}
            var gunImg List<SpriteID> = List<SpriteID>{}
            for index, gun in gunCombo {
                // Append(gunName, globalEntity<GlobalGunCombo>.GetGunName(gun))
                Append(gunImg, globalEntity<GlobalGunCombo>.GetGunImg(gun))
            }
            // Append(randomGunNames, gunName)
            Append(randomGunImgs, gunImg)
        }
        globalEntity<GlobalUIManager>.UpdateVoteUI(player, randomGunImgs)
    }

    /*
    Handle the chosen combo for a player.
    @param player The player entity to handle the chosen combo for
    @param chosenComboIndex The index of the chosen combo
    */
    async func HandleChosenCombo(chosenComboIndex int) {
        if chosenMutexLock == true {
            return
        }
        chosenMutexLock = true
        globalEntity<GlobalUIManager>.OpenSelectUI(thisEntity as entity<Player>, chosenComboIndex)
        if currentComboIndex == -1 {
            currentComboIndex = chosenComboIndex
            didChooseCombo = true
        } else {
            if currentComboIndex == chosenComboIndex {
                currentComboIndex = -1
                didChooseCombo = false
            } else {
                didChooseCombo = true
                currentComboIndex = chosenComboIndex
            }
        }
        WaitForMillisecond(200)
        chosenMutexLock = false
    }

    event OnChoosingWeapon(player entity<Player>, comboIndex int) {
        wait HandleChosenCombo(comboIndex)
    }

    // ==================================== UTILS FUNCTIONS ====================================
    /* Set the timer for the player's phase countdown HUD.
       @param timer: The timer to set for the player's phase countdown HUD, in seconds.
    */
    func SetTimer(timer int){
        phaseCountDownHUD<UIPhaseTimer>.BaseTime = globalEntity<Global>.GameTimeCount / 1000
        phaseCountDownHUD<UIPhaseTimer>.Duration = timer 
    }
}