/* Script: SpawnPoints.fcg
   Description: This script manages the spawn points in the game.
   It is responsible for getting and returning spawn points for all entities.
*/
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "LevelObject.fcc" as LevelObject
import "Player.fcc" as Player
import "List.fcc" as List
import "Scene.fcc" as Scene
import "Map.fcc" as Map
import "./GlobalConfig.fcg" as GlobalConfig
graph SpawnPoints {
    spawnDict Map<int, List<entity<SpawnPosition>>> // Map to store spawn points with round IDs, goes with the Safe Zone ID
    spawnPoints List<object>  // List to keep track of all spawn points
    spawnPositions List<Vector3> // Initialize a list to store spawn positions

    // Initialize the list of spawn names
    spawnNames List<string> = List<string>{LocString{"STAGE_1", List<string>{}}, LocString{"STAGE_2", List<string>{}}, LocString{"STAGE_3", List<string>{}}, LocString{"STAGE_4", List<string>{}}, LocString{"STAGE_5", List<string>{}}, LocString{"STAGE_6", List<string>{}}, LocString{"STAGE_7", List<string>{}}, LocString{"STAGE_8", List<string>{}}, LocString{"STAGE_9", List<string>{}}, LocString{"STAGE_10", List<string>{}}, LocString{"STAGE_11", List<string>{}}} // List to keep track of spawn point names

    // Initialize the spawn points and positions
    event OnGameStart() {
        spawnPoints = List<object>{} // Initialize the list of spawn points at the start of the game
        spawnPositions = List<Vector3>{} // Initialize the list of spawn positions
        spawnDict = Map<int, List<entity<SpawnPosition>>>{} // Initialize the map of spawn points
        if GlobalConfig.MAP_CHOSEN == EResScene.OLD_PEAK {
            spawnDict[0] = GetChildren(EResSceneOLD_PEAK.SpawnPoints as entity<Entity>) as List<entity<SpawnPosition>>
        } else {
            // LogError("<SpawnPoints.fcg<OnGameStart()>>: Invalid map chosen")
            return
        }
    }

    /*
    Get the spawn positions for a specific round
    @param: round The round ID to get spawn positions for
    @return: A list of Vector3 representing the spawn positions for the specified round
    */
    func GetSpawnPositionForRound(round int) List<Vector3> {
        if GlobalConfig.MAP_CHOSEN == EResScene.OLD_PEAK {
            var positions = List<Vector3>{}
            for index, spawnPoint in spawnDict[0] {
                Append(positions, spawnPoint<SpawnPosition>.AvailablePoint)
            }
            return positions
        } else {
            // LogError("<SpawnPoints.fcg<GetSpawnPositionForRound()>>: Invalid map chosen")
            return List<Vector3>{}
        }
    }

    /* Get the name of the stage for a specific round
    @param: round The round ID to get the stage name for
    @return: The name of the stage for the specified round
    */
    func GetNameForStage(round int) string {
        if GlobalConfig.MAP_CHOSEN == EResScene.OLD_PEAK {
            return "Old Peak"
        } else {
            // LogError("<SpawnPoints.fcg<GetNameForStage()>>: Invalid map chosen")
            return ""
        }
    }

    /*
    Get the spawn points for a specific round
    @param: round The round ID to get spawn points for
    @return: A list of entity<SpawnPosition> representing the spawn points for the specified round
    */
    func SetSpawnPointsActiveStatusForRound (round int, status bool) {
        if GlobalConfig.MAP_CHOSEN == EResScene.OLD_PEAK {
            for index, spawnPoint in spawnDict[0] {
                SetActive(spawnPoint as entity<Entity>, status)
            }
        } else {
            // LogError("<SpawnPoints.fcg<SetSpawnPointsActiveStatusForRound()>>: Invalid map chosen")
            return
        }
    }
}

// DEPRECATED FUNCTIONS
    /* This function retrieves spawn points from the scene and stores them in the spawnPositions list.
    It filters the level objects of type SpawnPos and extracts their positions.
    This function should be called at the start of the game or when needed.
    NOTE: This function returns a List<object> of spawn points, not their available positions. To get the positions,
    use GetSpawnPositionsFromScene() below.
    @return: A list of object representing the spawn points
    */
    // func GetSpawnPointsFromScene() List<object> {
    //     spawnPoints = FilterLevelObjects(LevelObjectType.SpawnPos)
    //     // LogInfo("<SpawnPoints.fcg<GetSpawnPointsFromScene()>>: Found spawn points: " + spawnPoints)
    //     return spawnPoints // Return the list of spawn points
    // }

    /* This function retrieves the available spawn positions from the spawn points in the scene.
    It iterates through the spawn points and extracts their available positions.
    This function should be called when you need to get the actual spawn positions for entities.
    @return: A list of Vector3 representing the available spawn positions
    */
    // func GetSpawnPositionsFromScene() List<Vector3> {
    //     var spawnPoints = GetSpawnPointsFromScene() // Get spawn points from the scene
    //     for index, spawnPoint in spawnPoints {
    //         if spawnPositions == nil {
    //             spawnPositions = List<Vector3>{}
    //         }
    //         var spawnEntity = spawnPoint as entity<SpawnPosition>
    //         Append(spawnPositions, spawnEntity<SpawnPosition>.AvailablePoint)
    //     }
    //     // LogInfo("<SpawnPoints.fcg<GetSpawnPositionsFromScene()>>: Spawn positions retrieved: " + spawnPositions) // Debug Info
    //     return spawnPositions // Return the list of spawn positions
    // }
