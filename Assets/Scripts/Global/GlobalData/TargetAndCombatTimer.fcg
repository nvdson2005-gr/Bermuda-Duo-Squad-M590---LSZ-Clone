/*
   This script manages the target and combat timer for each player.
   It is responsible for updating the UI elements related to the timer and combat stage.
*/
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Hud.fcc" as Hud
import "Map.fcc" as Map
import "Time.fcc" as Time
import "Convert.fcc" as Convert
import "Other.fcc" as Other
import "../GlobalManager/GlobalGameManager.fcg" as GlobalGameManager
import "../GlobalData/CombatRoundCounter.fcg" as CombatRoundCounter
import "Player.fcc" as Player
import "../GlobalData/GlobalConfig.fcg" as GlobalConfig
graph TargetAndCombatTimer {
    // Map to store the main custom UI (for unregister)
    mainCustomUIDict Map<entity<Player>, entity<CustomUI>>

    //Executed when entity is created
    event OnAwake() {
        mainCustomUIDict = Map<entity<Player>, entity<CustomUI>>{}
    }

    /*
    Register the player's combat timer UI.
    This function creates a custom UI for the player and initializes the timer UI with 0:00.
    It also registers the target count and round stage text widgets.
    @param player The player entity to register the UI for
    */
    func RegisterGameInfo(player entity<Player>) {
        if !ContainKey(mainCustomUIDict, player) {
            CreateCustomUI(out var createdUI, player, EResUI.GameInfo)
            mainCustomUIDict[player] = createdUI
        }
    }

    /*
    Unregister the player's game info UI.
    @param player The player entity to unregister the UI for
    */
    func UnregisterGameInfo(player entity<Player>) {
        if Map.ContainKey(mainCustomUIDict, player) {
            DestroyCustomUI(mainCustomUIDict[player]) // Destroy the player's timer UI
            Remove(mainCustomUIDict, player) // Remove the player's main custom UI from the map
        }
        // LogError("Unregistered game info for player: " + player<Player>.NickName)
    }
    /*
    Register the player's round stage UI.
    This function creates a custom UI for the player and initializes the round stage UI with the current stage information.
    It also registers the target count and timer text widgets.
    @param player The player entity to register the UI for
    */
    func UpdateRoundStageInfo(player entity<Player>, stage int, stageName string) {
        if GlobalConfig.MAP_CHOSEN == EResScene.OLD_PEAK {
            var stageTextWidget entity<UIWidget>
            stageTextWidget = GetWidgetFromCustomUI(player, mainCustomUIDict[player], EResUIGameInfo.RoundStageText as CustomUIWidgetID)
            stageTextWidget<UIWidgetLabel>.Content = LocString{"FULL_SCBOARD_TARGET", List<string>{ToString(globalEntity<CombatRoundCounter>.GetCount()), ToString(GlobalConfig.MAX_ROUND)}}
            return
        } else {
            if ContainKey(mainCustomUIDict, player) {
                var stageTextWidget entity<UIWidget>
                stageTextWidget = GetWidgetFromCustomUI(player, mainCustomUIDict[player], EResUIGameInfo.RoundStageText as CustomUIWidgetID)
                stageTextWidget<UIWidgetLabel>.Content = LocString{"ROUND_INFO", List<string>{stageName}}
            } else {
                // LogError("Player does not have a combat stage UI registered.")
            }
        }
    }

    func UpdateEventShortDescription(player entity<Player>, eventShortDesc string) {
        if ContainKey(mainCustomUIDict, player) {
            var eventShortDescWidget entity<UIWidget>
            eventShortDescWidget = GetWidgetFromCustomUI(player, mainCustomUIDict[player], EResUIGameInfo.EventShortDesc as CustomUIWidgetID)
            eventShortDescWidget<UIWidgetLabel>.Content = eventShortDesc
        }
    }
}